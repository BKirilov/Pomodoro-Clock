{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["audio","document","getElementById","App","props","state","breakCount","sessionCount","clockCount","currentTimer","isPlaying","handlePlayPause","clearInterval","loop","setState","setInterval","play","handleReset","pause","currentTime","convertToTime","count","minutes","Math","floor","seconds","handleLengthChange","timerType","newCount","toLowerCase","undefined","this","breakProps","title","handleDecrease","handleIncrease","sessionProps","className","id","onClick","React","Component","SetTimer","ReactDOM","render","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ed40737d.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\n\nconst audio = document.getElementById(\"beep\");\n\nclass App extends React.Component {\n  state = {\n    breakCount: 5,\n    sessionCount: 25,\n    clockCount: 25 * 60,\n    currentTimer: \"Session\",\n    isPlaying: false,\n  };\n\n  constructor(props) {\n    super(props);\n    this.loop = undefined;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.loop);\n  }\n\n  handlePlayPause = () => {\n    const { isPlaying } = this.state;\n\n    if (isPlaying) {\n      clearInterval(this.loop);\n\n      this.setState({\n        isPlaying: false,\n      });\n    } else {\n      this.setState({\n        isPlaying: true,\n      });\n\n      this.loop = setInterval(() => {\n        const {\n          clockCount,\n          currentTimer,\n          breakCount,\n          sessionCount,\n        } = this.state;\n\n        if (clockCount === 0) {\n          this.setState({\n            currentTimer: currentTimer === \"Session\" ? \"Break\" : \"Session\",\n            clockCount:\n              currentTimer === \"Session\" ? breakCount * 60 : sessionCount * 60,\n          });\n\n          audio.play();\n        } else {\n          this.setState({\n            clockCount: clockCount - 1,\n          });\n        }\n      }, 1000);\n    }\n  };\n\n  handleReset = () => {\n    this.setState({\n      breakCount: 5,\n      sessionCount: 25,\n      clockCount: 25 * 60,\n      currentTimer: \"Session\",\n      isPlaying: false,\n    });\n\n    clearInterval(this.loop);\n\n    audio.pause();\n    audio.currentTime = 0;\n  };\n\n  convertToTime = (count) => {\n    let minutes = Math.floor(count / 60);\n    let seconds = count % 60;\n\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n\n    return `${minutes}:${seconds}`;\n  };\n\n  handleLengthChange = (count, timerType) => {\n    const { sessionCount, breakCount, isPlaying, currentTimer } = this.state;\n\n    let newCount;\n\n    if (timerType === \"session\") {\n      newCount = sessionCount + count;\n    } else {\n      newCount = breakCount + count;\n    }\n\n    if (newCount > 0 && newCount < 61 && !isPlaying) {\n      this.setState({\n        [`${timerType}Count`]: newCount,\n      });\n\n      if (currentTimer.toLowerCase() === timerType) {\n        this.setState({\n          clockCount: newCount * 60,\n        });\n      }\n    }\n  };\n  render() {\n    const {\n      breakCount,\n      sessionCount,\n      clockCount,\n      currentTimer,\n      isPlaying,\n    } = this.state;\n\n    const breakProps = {\n      title: \"Break\",\n      count: breakCount,\n      handleDecrease: () => this.handleLengthChange(-1, \"break\"),\n      handleIncrease: () => this.handleLengthChange(1, \"break\"),\n    };\n\n    const sessionProps = {\n      title: \"Session\",\n      count: sessionCount,\n      handleDecrease: () => this.handleLengthChange(-1, \"session\"),\n      handleIncrease: () => this.handleLengthChange(1, \"session\"),\n    };\n\n    return (\n      <div>\n        <div className=\"flex\">\n          <SetTimer {...breakProps} />\n          <SetTimer {...sessionProps} />\n        </div>\n\n        <div className=\"clock-container\">\n          <h1 id=\"timer-label\">{currentTimer}</h1>\n          <span id=\"time-left\">{this.convertToTime(clockCount)}</span>\n\n          <div className=\"flex\">\n            <button id=\"start_stop\" onClick={this.handlePlayPause}>\n              <i className={`fas fa-${isPlaying ? \"pause\" : \"play\"}`} />\n            </button>\n            <button id=\"reset\" onClick={this.handleReset}>\n              <i className=\"fas fa-sync\" />\n            </button>\n          </div>\n        </div>\n        <footer>Bozhidar Kirilov Â© 2020</footer>\n      </div>\n    );\n  }\n}\n\nconst SetTimer = (props) => {\n  const id = props.title.toLowerCase();\n\n  return (\n    <div className=\"timer-container\">\n      <h2 id={`${id}-label`}>{props.title} Length</h2>\n      <div className=\"flex actions-wrapper\">\n        <button id={`${id}-decrement`} onClick={props.handleDecrease}>\n          <i className=\"fas fa-minus\" />\n        </button>\n\n        <span id={`${id}-length`}>{props.count}</span>\n\n        <button id={`${id}-increment`} onClick={props.handleIncrease}>\n          <i className=\"fas fa-plus\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}